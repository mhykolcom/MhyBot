"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const utils_1 = require("../utils");
class Endpoint {
    constructor(clientId, oauth, path) {
        this.requester = new __1.ApiRequester(clientId, oauth);
        this.path = path;
    }
    get(queryArguments = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield (this.requester.get(this.path, queryArguments));
            return utils_1.toProperObject(result);
        });
    }
    put(queryArguments = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (this.requester.put(this.path, queryArguments));
        });
    }
    post(queryArguments = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (this.requester.post(this.path, queryArguments));
        });
    }
    delete(queryArguments = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (this.requester.delete(this.path, queryArguments));
        });
    }
    authorize(password) {
        this.requester.authorize(password);
        return this;
    }
    setClientId(clientId) {
        this.requester.setClientId(clientId);
        return this;
    }
}
exports.Endpoint = Endpoint;
class UserEndpoint extends Endpoint {
    constructor(clientId, oauth) {
        super(clientId, oauth, "/users");
        this.follows = new Endpoint(clientId, oauth, "/users/follows");
    }
}
class GameEndpoint extends Endpoint {
    constructor(clientId, oauth) {
        super(clientId, oauth, "/games");
        this.top = new Endpoint(clientId, oauth, "/games/top");
    }
}
/**
 * Main class for making Twitch API calls.
 */
class TwitchApi {
    /**
     * Constructs the API caller with a client ID.
     * @param clientId The client ID to make calls with.
     * @param oauth Optional Bearer token to pass with the API call.
     */
    constructor(clientId, oauth = "") {
        this.users = new UserEndpoint(clientId, oauth);
        this.games = new GameEndpoint(clientId, oauth);
        this.streams = new Endpoint(clientId, oauth, "/streams");
        this.videos = new Endpoint(clientId, oauth, "/videos");
        this.clips = new Endpoint(clientId, oauth, "/clips");
    }
}
exports.TwitchApi = TwitchApi;
//# sourceMappingURL=endpoint.js.map